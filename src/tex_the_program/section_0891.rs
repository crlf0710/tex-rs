//! @* \[40] Pre-hyphenation.
//! When the line-breaking routine is unable to find a feasible sequence of
//! breakpoints, it makes a second pass over the paragraph, attempting to
//! hyphenate the hyphenatable words. The goal of hyphenation is to insert
//! discretionary material into the paragraph so that there are more
//! potential places to break.
//!
//! The general rules for hyphenation are somewhat complex and technical,
//! because we want to be able to hyphenate words that are preceded or
//! followed by punctuation marks, and because we want the rules to work
//! for languages other than English. We also must contend with the fact
//! that hyphens might radically alter the ligature and kerning structure
//! of a word.
//!
//! A sequence of characters will be considered for hyphenation only if it
//! belongs to a ``potentially hyphenatable part'' of the current paragraph.
//! This is a sequence of nodes $p_0p_1\ldots p_m$ where $p_0$ is a glue node,
//! $p_1\ldots p_{m-1}$ are either character or ligature or whatsit or
//! implicit kern nodes, and $p_m$ is a glue or penalty or insertion or adjust
//! or mark or whatsit or explicit kern node.  (Therefore hyphenation is
//! disabled by boxes, math formulas, and discretionary nodes already inserted
//! by the user.) The ligature nodes among $p_1\ldots p_{m-1}$ are effectively
//! expanded into the original non-ligature characters; the kern nodes and
//! whatsits are ignored. Each character |c| is now classified as either a
//! nonletter (if |lc_code(c)=0|), a lowercase letter (if
//! |lc_code(c)=c|), or an uppercase letter (otherwise); an uppercase letter
//! is treated as if it were |lc_code(c)| for purposes of hyphenation. The
//! characters generated by $p_1\ldots p_{m-1}$ may begin with nonletters; let
//! $c_1$ be the first letter that is not in the middle of a ligature. Whatsit
//! nodes preceding $c_1$ are ignored; a whatsit found after $c_1$ will be the
//! terminating node $p_m$. All characters that do not have the same font as
//! $c_1$ will be treated as nonletters. The |hyphen_char| for that font
//! must be between 0 and 255, otherwise hyphenation will not be attempted.
//! \TeX\ looks ahead for as many consecutive letters $c_1\ldots c_n$ as
//! possible; however, |n| must be less than 64, so a character that would
//! otherwise be $c_{64}$ is effectively not a letter. Furthermore $c_n$ must
//! not be in the middle of a ligature.  In this way we obtain a string of
//! letters $c_1\ldots c_n$ that are generated by nodes $p_a\ldots p_b$, where
//! |1<=a<=b+1<=m|. If |n>=l_hyf+r_hyf|, this string qualifies for hyphenation;
//! however, |uc_hyph| must be positive, if $c_1$ is uppercase.
//!
//! The hyphenation process takes place in three stages. First, the candidate
//! sequence $c_1\ldots c_n$ is found; then potential positions for hyphens
//! are determined by referring to hyphenation tables; and finally, the nodes
//! $p_a\ldots p_b$ are replaced by a new sequence of nodes that includes the
//! discretionary breaks found.
//!
//! Fortunately, we do not have to do all this calculation very often, because
//! of the way it has been taken out of \TeX's inner loop. For example, when
//! the second edition of the author's 700-page book {\sl Seminumerical
//! Algorithms} was typeset by \TeX, only about 1.2 hyphenations needed to be
//! @^Knuth, Donald Ervin@>
//! tried per paragraph, since the line breaking algorithm needed to use two
//! passes on only about 5 per cent of the paragraphs.
//
// @<Initialize for hyphenating...@>=
pub(crate) macro Initialize_for_hyphenating_a_paragraph($globals:expr) {{
    crate::trace_span!("Initialize for hyphenating...");
    // begin @!init if trie_not_ready then init_trie;@+tini@;@/
    crate::region_initex! {
        if $globals.trie_not_ready {
            init_trie($globals)?;
        }
    }
    // cur_lang:=init_cur_lang; l_hyf:=init_l_hyf; r_hyf:=init_r_hyf;
    $globals.cur_lang = $globals.init_cur_lang;
    $globals.l_hyf = $globals.init_l_hyf;
    $globals.r_hyf = $globals.init_r_hyf;
    // end
    use crate::section_0966::init_trie;
}}
